/* Generated by Yosys 0.27+33 (git sha1 a2655a4b7, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

(* top =  1  *)
(* src = "ALU_Design.v:4.1-58.10" *)
module ALU_Design(Sw, Btn, LEDOut, hexdisp, AN);
  (* src = "ALU_Design.v:7.18-7.20" *)
  output [7:0] AN;
  wire [7:0] AN;
  (* src = "ALU_Design.v:19.10-19.14" *)
  wire Bout;
  (* src = "ALU_Design.v:10.17-10.20" *)
  input [2:0] Btn;
  wire [2:0] Btn;
  (* src = "ALU_Design.v:17.10-17.13" *)
  wire Cin;
  (* src = "ALU_Design.v:18.10-18.14" *)
  wire Cout;
  (* src = "ALU_Design.v:15.16-15.20" *)
  wire [7:0] Diff;
  (* src = "ALU_Design.v:5.18-5.24" *)
  output [3:0] LEDOut;
  wire [3:0] LEDOut;
  (* src = "ALU_Design.v:12.16-12.19" *)
  wire [7:0] OpX;
  (* src = "ALU_Design.v:13.16-13.19" *)
  wire [7:0] OpY;
  (* src = "ALU_Design.v:16.16-16.19" *)
  wire [8:0] Out;
  (* src = "ALU_Design.v:23.10-23.16" *)
  wire Output;
  (* src = "ALU_Design.v:14.16-14.19" *)
  wire [7:0] Sum;
  (* src = "ALU_Design.v:9.18-9.20" *)
  input [15:0] Sw;
  wire [15:0] Sw;
  (* src = "ALU_Design.v:20.16-20.21" *)
  wire [8:0] adder;
  (* src = "ALU_Design.v:24.15-24.26" *)
  wire [3:0] eightmuxOut;
  (* src = "ALU_Design.v:6.18-6.25" *)
  output [6:0] hexdisp;
  wire [6:0] hexdisp;
  (* src = "ALU_Design.v:22.10-22.13" *)
  wire sel;
  (* src = "ALU_Design.v:25.10-25.16" *)
  wire ss_sel;
  (* src = "ALU_Design.v:21.16-21.26" *)
  wire [8:0] subtractor;
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:46.25-46.55" *)
  EightBitAdder Add1 (
    .RCOAddX(OpX),
    .RCOAddY(OpY),
    .RCOCarryIn(Cin),
    .RCOCarryOut(Cout),
    .RCOSum(Sum)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:52.25-52.46" *)
  DispOut DO (
    .DataIn(Output),
    .DataOut(LEDOut[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:44.25-44.65" *)
  InputRead In0 (
    .Btn(Btn),
    .Cin(Cin),
    .InputX(OpX),
    .InputY(OpY),
    .Sw(Sw),
    .sel(sel),
    .ss_sel(ss_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:56.25-56.49" *)
  SevenSegments SS (
    .disp(hexdisp),
    .hexOut(eightmuxOut)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:47.25-47.56" *)
  EightBitSubtractor Sub1 (
    .RCOBorrowIn(Cin),
    .RCOBorrowOut(Bout),
    .RCODiff(Diff),
    .RCOSubX(OpX),
    .RCOSubY(OpY)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:48.25-48.72" *)
  comparator comp (
    .A(OpX),
    .A_eq_B(LEDOut[2]),
    .A_gt_B(LEDOut[1]),
    .A_lt_B(LEDOut[0]),
    .B(OpY)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:55.25-55.59" *)
  EightMux eightmux (
    .in(Out),
    .out(eightmuxOut),
    .sel(ss_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:50.25-50.72" *)
  mux2to1_8 muxAdderSubtractor (
    .A(subtractor),
    .B(adder),
    .out_8(Out),
    .sel(sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:51.25-51.68" *)
  mux2to1_1 muxCarryinBorrowin (
    .A(Bout),
    .B(Cout),
    .out(Output),
    .sel(sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ALU_Design.v:53.25-53.47" *)
  muxAN muxan (
    .btn(ss_sel),
    .in(Out),
    .out(AN)
  );
  assign adder[7:0] = Sum;
  assign adder[8] = Cout;
  assign subtractor[7:0] = Diff;
  assign subtractor[8] = Bout;
endmodule

(* src = "DispOut.v:23.1-29.10" *)
module DispOut(DataOut, DataIn);
  (* src = "DispOut.v:0.0-0.0" *)
  wire _0_;
  (* src = "DispOut.v:25.11-25.17" *)
  input DataIn;
  wire DataIn;
  (* src = "DispOut.v:24.12-24.19" *)
  output DataOut;
  wire DataOut;
  assign _0_ = ~ (* src = "DispOut.v:0.0-0.0" *) DataIn;
  assign DataOut = _0_;
endmodule

(* src = "EightBitAdder.v:23.1-39.10" *)
module EightBitAdder(RCOSum, RCOCarryOut, RCOAddX, RCOAddY, RCOCarryIn);
  (* src = "EightBitAdder.v:33.5-36.8" *)
  wire _0_;
  (* src = "EightBitAdder.v:33.5-36.8" *)
  wire [7:0] _1_;
  (* src = "EightBitAdder.v:35.33-35.50" *)
  wire [8:0] _2_;
  (* src = "EightBitAdder.v:35.33-35.63" *)
  wire [8:0] _3_;
  (* src = "EightBitAdder.v:26.21-26.28" *)
  input [7:0] RCOAddX;
  wire [7:0] RCOAddX;
  (* src = "EightBitAdder.v:27.21-27.28" *)
  input [7:0] RCOAddY;
  wire [7:0] RCOAddY;
  (* src = "EightBitAdder.v:28.21-28.31" *)
  input RCOCarryIn;
  wire RCOCarryIn;
  (* src = "EightBitAdder.v:25.21-25.32" *)
  output RCOCarryOut;
  wire RCOCarryOut;
  (* src = "EightBitAdder.v:24.21-24.27" *)
  output [7:0] RCOSum;
  wire [7:0] RCOSum;
  assign _2_ = RCOAddX + (* src = "EightBitAdder.v:35.33-35.50" *) RCOAddY;
  assign _3_ = _2_ + (* src = "EightBitAdder.v:35.33-35.63" *) RCOCarryIn;
  assign { _0_, _1_ } = _3_;
  assign RCOSum = _3_[7:0];
  assign RCOCarryOut = _3_[8];
endmodule

(* src = "EightBitSubtractor.v:23.1-47.10" *)
module EightBitSubtractor(RCODiff, RCOBorrowOut, RCOSubX, RCOSubY, RCOBorrowIn);
  (* src = "EightBitSubtractor.v:30.10-30.12" *)
  wire B1;
  (* src = "EightBitSubtractor.v:31.10-31.12" *)
  wire B2;
  (* src = "EightBitSubtractor.v:32.10-32.12" *)
  wire B3;
  (* src = "EightBitSubtractor.v:33.10-33.12" *)
  wire B4;
  (* src = "EightBitSubtractor.v:34.10-34.12" *)
  wire B5;
  (* src = "EightBitSubtractor.v:35.10-35.12" *)
  wire B6;
  (* src = "EightBitSubtractor.v:36.10-36.12" *)
  wire B7;
  (* src = "EightBitSubtractor.v:28.11-28.22" *)
  input RCOBorrowIn;
  wire RCOBorrowIn;
  (* src = "EightBitSubtractor.v:25.12-25.24" *)
  output RCOBorrowOut;
  wire RCOBorrowOut;
  (* src = "EightBitSubtractor.v:24.18-24.25" *)
  output [7:0] RCODiff;
  wire [7:0] RCODiff;
  (* src = "EightBitSubtractor.v:26.17-26.24" *)
  input [7:0] RCOSubX;
  wire [7:0] RCOSubX;
  (* src = "EightBitSubtractor.v:27.17-27.24" *)
  input [7:0] RCOSubY;
  wire [7:0] RCOSubY;
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:38.20-38.80" *)
  FullSubtractor RCO_FS0 (
    .Bin(RCOBorrowIn),
    .Bout(B1),
    .Diff(RCODiff[0]),
    .Xin(RCOSubX[0]),
    .Yin(RCOSubY[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:39.20-39.71" *)
  FullSubtractor RCO_FS1 (
    .Bin(B1),
    .Bout(B2),
    .Diff(RCODiff[1]),
    .Xin(RCOSubX[1]),
    .Yin(RCOSubY[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:40.20-40.71" *)
  FullSubtractor RCO_FS2 (
    .Bin(B2),
    .Bout(B3),
    .Diff(RCODiff[2]),
    .Xin(RCOSubX[2]),
    .Yin(RCOSubY[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:41.20-41.71" *)
  FullSubtractor RCO_FS3 (
    .Bin(B3),
    .Bout(B4),
    .Diff(RCODiff[3]),
    .Xin(RCOSubX[3]),
    .Yin(RCOSubY[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:42.20-42.71" *)
  FullSubtractor RCO_FS4 (
    .Bin(B4),
    .Bout(B5),
    .Diff(RCODiff[4]),
    .Xin(RCOSubX[4]),
    .Yin(RCOSubY[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:43.20-43.71" *)
  FullSubtractor RCO_FS5 (
    .Bin(B5),
    .Bout(B6),
    .Diff(RCODiff[5]),
    .Xin(RCOSubX[5]),
    .Yin(RCOSubY[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:44.20-44.71" *)
  FullSubtractor RCO_FS6 (
    .Bin(B6),
    .Bout(B7),
    .Diff(RCODiff[6]),
    .Xin(RCOSubX[6]),
    .Yin(RCOSubY[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "EightBitSubtractor.v:45.20-45.81" *)
  FullSubtractor RCO_FS7 (
    .Bin(B7),
    .Bout(RCOBorrowOut),
    .Diff(RCODiff[7]),
    .Xin(RCOSubX[7]),
    .Yin(RCOSubY[7])
  );
endmodule

(* src = "EightMux.v:23.1-36.10" *)
module EightMux(out, in, sel);
  (* src = "EightMux.v:29.5-35.12" *)
  wire [3:0] _0_;
  wire [3:0] _1_;
  wire _2_;
  wire _3_;
  (* src = "EightMux.v:25.17-25.19" *)
  input [8:0] in;
  wire [8:0] in;
  (* src = "EightMux.v:24.18-24.21" *)
  output [3:0] out;
  wire [3:0] out;
  (* src = "EightMux.v:26.11-26.14" *)
  input sel;
  wire sel;
  function [3:0] _4_;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "EightMux.v:0.0-0.0|EightMux.v:31.13-34.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _4_ = b[3:0];
      2'b1?:
        _4_ = b[7:4];
      default:
        _4_ = a;
    endcase
  endfunction
  assign _1_ = _4_(4'hx, in[7:0], { _3_, _2_ });
  assign _3_ = ~ (* full_case = 32'd1 *) (* src = "EightMux.v:0.0-0.0|EightMux.v:31.13-34.20" *) sel;
  assign _2_ = sel;
  assign _0_ = _1_;
  assign out = _1_;
endmodule

(* src = "FullSubtractor.v:23.1-39.10" *)
module FullSubtractor(Diff, Bout, Xin, Yin, Bin);
  (* src = "FullSubtractor.v:37.8-37.24" *)
  wire _0_;
  (* src = "FullSubtractor.v:31.10-31.12" *)
  wire B1;
  (* src = "FullSubtractor.v:32.10-32.12" *)
  wire B2;
  (* src = "FullSubtractor.v:26.11-26.14" *)
  input Bin;
  wire Bin;
  (* src = "FullSubtractor.v:28.12-28.16" *)
  output Bout;
  wire Bout;
  (* src = "FullSubtractor.v:30.10-30.12" *)
  wire D1;
  (* src = "FullSubtractor.v:27.12-27.16" *)
  output Diff;
  wire Diff;
  (* src = "FullSubtractor.v:24.11-24.14" *)
  input Xin;
  wire Xin;
  (* src = "FullSubtractor.v:25.11-25.14" *)
  input Yin;
  wire Yin;
  assign _0_ = B2 | (* src = "FullSubtractor.v:37.8-37.24" *) B1;
  (* module_not_derived = 32'd1 *)
  (* src = "FullSubtractor.v:34.20-34.41" *)
  HalfSubtractor HS1 (
    .BorrowHalf(B1),
    .DiffHalf(D1),
    .Xhalf(Xin),
    .Yhalf(Yin)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "FullSubtractor.v:35.20-35.42" *)
  HalfSubtractor HS2 (
    .BorrowHalf(B2),
    .DiffHalf(Diff),
    .Xhalf(D1),
    .Yhalf(Bin)
  );
  assign Bout = _0_;
endmodule

(* src = "HalfSubtractor.v:23.1-32.10" *)
module HalfSubtractor(DiffHalf, BorrowHalf, Xhalf, Yhalf);
  (* src = "HalfSubtractor.v:30.8-30.36" *)
  wire _0_;
  (* src = "HalfSubtractor.v:30.22-30.28" *)
  wire _1_;
  (* src = "HalfSubtractor.v:29.8-29.33" *)
  wire _2_;
  (* src = "HalfSubtractor.v:25.12-25.22" *)
  output BorrowHalf;
  wire BorrowHalf;
  (* src = "HalfSubtractor.v:24.12-24.20" *)
  output DiffHalf;
  wire DiffHalf;
  (* src = "HalfSubtractor.v:26.11-26.16" *)
  input Xhalf;
  wire Xhalf;
  (* src = "HalfSubtractor.v:27.11-27.16" *)
  input Yhalf;
  wire Yhalf;
  assign _0_ = _1_ & (* src = "HalfSubtractor.v:30.8-30.36" *) Yhalf;
  assign _1_ = ~ (* src = "HalfSubtractor.v:30.22-30.28" *) Xhalf;
  assign _2_ = Xhalf ^ (* src = "HalfSubtractor.v:29.8-29.33" *) Yhalf;
  assign DiffHalf = _2_;
  assign BorrowHalf = _0_;
endmodule

(* src = "InputRead.v:23.1-41.10" *)
module InputRead(Sw, Btn, InputX, InputY, Cin, sel, ss_sel);
  (* src = "InputRead.v:0.0-0.0" *)
  wire _0_;
  (* src = "InputRead.v:0.0-0.0" *)
  wire _1_;
  (* src = "InputRead.v:0.0-0.0" *)
  wire _2_;
  (* src = "InputRead.v:25.17-25.20" *)
  input [2:0] Btn;
  wire [2:0] Btn;
  (* src = "InputRead.v:28.12-28.15" *)
  output Cin;
  wire Cin;
  (* src = "InputRead.v:26.18-26.24" *)
  output [7:0] InputX;
  wire [7:0] InputX;
  (* src = "InputRead.v:27.18-27.24" *)
  output [7:0] InputY;
  wire [7:0] InputY;
  (* src = "InputRead.v:24.18-24.20" *)
  input [15:0] Sw;
  wire [15:0] Sw;
  (* src = "InputRead.v:29.12-29.15" *)
  output sel;
  wire sel;
  (* src = "InputRead.v:30.12-30.18" *)
  output ss_sel;
  wire ss_sel;
  assign _0_ = ~ (* src = "InputRead.v:0.0-0.0" *) Btn[0];
  assign _1_ = ~ (* src = "InputRead.v:0.0-0.0" *) Btn[1];
  assign _2_ = ~ (* src = "InputRead.v:0.0-0.0" *) Btn[2];
  assign InputX = Sw[15:8];
  assign InputY = Sw[7:0];
  assign Cin = _0_;
  assign sel = _1_;
  assign ss_sel = _2_;
endmodule

(* src = "SevenSegments.v:23.1-51.10" *)
module SevenSegments(disp, hexOut);
  (* src = "SevenSegments.v:28.9-49.16" *)
  wire [6:0] _0_;
  wire [6:0] _1_;
  (* src = "SevenSegments.v:24.18-24.22" *)
  output [6:0] disp;
  wire [6:0] disp;
  (* src = "SevenSegments.v:25.17-25.23" *)
  input [3:0] hexOut;
  wire [3:0] hexOut;
  (* full_case = 32'd1 *)
  (* src = "SevenSegments.v:30.17-48.24" *)
  reg [6:0] \$auto$proc_rom.cc:150:do_switch$32  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$32 [0] = 7'h0e;
    \$auto$proc_rom.cc:150:do_switch$32 [1] = 7'h06;
    \$auto$proc_rom.cc:150:do_switch$32 [2] = 7'h21;
    \$auto$proc_rom.cc:150:do_switch$32 [3] = 7'h46;
    \$auto$proc_rom.cc:150:do_switch$32 [4] = 7'h03;
    \$auto$proc_rom.cc:150:do_switch$32 [5] = 7'h08;
    \$auto$proc_rom.cc:150:do_switch$32 [6] = 7'h10;
    \$auto$proc_rom.cc:150:do_switch$32 [7] = 7'h00;
    \$auto$proc_rom.cc:150:do_switch$32 [8] = 7'h78;
    \$auto$proc_rom.cc:150:do_switch$32 [9] = 7'h02;
    \$auto$proc_rom.cc:150:do_switch$32 [10] = 7'h12;
    \$auto$proc_rom.cc:150:do_switch$32 [11] = 7'h19;
    \$auto$proc_rom.cc:150:do_switch$32 [12] = 7'h30;
    \$auto$proc_rom.cc:150:do_switch$32 [13] = 7'h24;
    \$auto$proc_rom.cc:150:do_switch$32 [14] = 7'h79;
    \$auto$proc_rom.cc:150:do_switch$32 [15] = 7'h40;
  end
  assign _1_ = \$auto$proc_rom.cc:150:do_switch$32 [hexOut];
  assign _0_ = _1_;
  assign disp = _1_;
endmodule

(* src = "comparator.v:23.1-40.10" *)
module comparator(A_lt_B, A_gt_B, A_eq_B, A, B);
  (* src = "comparator.v:34.5-39.12" *)
  wire _0_;
  (* src = "comparator.v:34.5-39.12" *)
  wire _1_;
  (* src = "comparator.v:34.5-39.12" *)
  wire _2_;
  (* src = "comparator.v:38.23-38.29" *)
  wire _3_;
  (* src = "comparator.v:37.23-37.28" *)
  wire _4_;
  (* src = "comparator.v:36.23-36.28" *)
  wire _5_;
  (* src = "comparator.v:27.17-27.18" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "comparator.v:26.12-26.18" *)
  output A_eq_B;
  wire A_eq_B;
  (* src = "comparator.v:25.12-25.18" *)
  output A_gt_B;
  wire A_gt_B;
  (* src = "comparator.v:24.12-24.18" *)
  output A_lt_B;
  wire A_lt_B;
  (* src = "comparator.v:28.17-28.18" *)
  input [7:0] B;
  wire [7:0] B;
  assign _3_ = A == (* src = "comparator.v:38.23-38.29" *) B;
  assign _4_ = A > (* src = "comparator.v:37.23-37.28" *) B;
  assign _5_ = A < (* src = "comparator.v:36.23-36.28" *) B;
  assign _0_ = _3_;
  assign _1_ = _4_;
  assign _2_ = _5_;
  assign A_lt_B = _5_;
  assign A_gt_B = _4_;
  assign A_eq_B = _3_;
endmodule

(* src = "mux2to1.v:41.1-56.10" *)
module mux2to1_1(out, A, B, sel);
  (* src = "mux2to1.v:48.5-54.12" *)
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "mux2to1.v:43.11-43.12" *)
  input A;
  wire A;
  (* src = "mux2to1.v:44.11-44.12" *)
  input B;
  wire B;
  (* src = "mux2to1.v:42.12-42.15" *)
  output out;
  wire out;
  (* src = "mux2to1.v:45.11-45.14" *)
  input sel;
  wire sel;
  assign _1_ = _2_ ? (* full_case = 32'd1 *) (* src = "mux2to1.v:50.17-50.20|mux2to1.v:50.13-53.26" *) B : A;
  assign _2_ = sel;
  assign _0_ = _1_;
  assign out = _1_;
endmodule

(* src = "mux2to1.v:23.1-38.10" *)
module mux2to1_8(out_8, A, B, sel);
  (* src = "mux2to1.v:30.5-36.12" *)
  wire [8:0] _0_;
  (* src = "mux2to1.v:30.5-36.12" *)
  wire [8:0] _1_;
  (* src = "mux2to1.v:29.15-29.24" *)
  wire [8:0] _2_;
  wire [8:0] _3_;
  wire _4_;
  (* src = "mux2to1.v:25.17-25.18" *)
  input [8:0] A;
  wire [8:0] A;
  (* src = "mux2to1.v:26.17-26.18" *)
  input [8:0] B;
  wire [8:0] B;
  (* src = "mux2to1.v:24.18-24.23" *)
  output [8:0] out_8;
  wire [8:0] out_8;
  (* src = "mux2to1.v:27.11-27.14" *)
  input sel;
  wire sel;
  assign _3_ = _4_ ? (* full_case = 32'd1 *) (* src = "mux2to1.v:32.17-32.20|mux2to1.v:32.13-35.27" *) B : A;
  assign _2_ = 9'h000;
  assign _0_ = _1_;
  assign _4_ = sel;
  assign _1_ = _3_;
  assign out_8 = _3_;
endmodule

(* src = "muxAN.v:23.1-36.10" *)
module muxAN(out, in, btn);
  (* src = "muxAN.v:29.5-35.12" *)
  wire [7:0] _0_;
  (* src = "muxAN.v:31.17-31.21" *)
  wire _1_;
  wire [7:0] _2_;
  wire _3_;
  (* src = "muxAN.v:26.11-26.14" *)
  input btn;
  wire btn;
  (* src = "muxAN.v:24.17-24.19" *)
  input [8:0] in;
  wire [8:0] in;
  (* src = "muxAN.v:25.18-25.21" *)
  output [7:0] out;
  wire [7:0] out;
  assign _1_ = ! (* src = "muxAN.v:31.17-31.21" *) btn;
  assign _2_ = btn ? (* full_case = 32'd1 *) (* src = "muxAN.v:31.17-31.21|muxAN.v:31.13-34.36" *) 8'hfe : 8'hfd;
  assign _3_ = _1_;
  assign _0_ = _2_;
  assign out = _2_;
endmodule
